setwd("~/Desktop/Energy")
install.packages("dplyr")
install.packages("tidyr")
library(dplyr)
library(tidyr)

household <- read.csv("household_power_consumption.txt", sep=";", stringsAsFactors = FALSE, header=TRUE)
summary(household)

household$Global_active_power<-as.numeric(household$Global_active_power)
household$Global_reactive_power<-as.numeric(household$Global_reactive_power)
household$Voltage<-as.numeric(household$Voltage)
household$Global_intensity<-as.numeric(household$Global_intensity)
household$Sub_metering_1<-as.numeric(household$Sub_metering_1)
household$Sub_metering_2<-as.numeric(household$Sub_metering_2)
household$Sub_metering_3<-as.numeric(household$Sub_metering_3)

household<- subset(household, !(is.na(Sub_metering_1)| is.na(Sub_metering_2)| is.na(Sub_metering_3)| is.na(Global_active_power)| is.na(Global_reactive_power)| is.na(Global_active_power)| is.na(Voltage)| is.na(Time)| is.na(Date)))

household <-cbind(household,paste(household$Date,household$Time), stringsAsFactors=FALSE)
colnames(household)[10] <-"DateTime"
household <- household[,c(ncol(household), 1:(ncol(household)-1))]
head(household)

household$DateTime <- strptime(household$DateTime, "%d/%m/%Y %H:%M:%S")
household$Date <- as.Date(household$Date, "%d/%m/%Y")
str(household)

summary(household)
sd(household$Sub_metering_1)
var(household$Sub_metering_1)
mean(household$Sub_metering_1)

#Here is the route that I took in Rstudio for forcasting and graphing:
 
#To create a time series:
demand <- ts(Feb2007, start = c(2007, 1), frequency = 12)
plot(demand)
 
#To create Holt Winters:
hw <- HoltWinters(demand)
plot(hw)
 
#To create forecasts:
forecast <- predict(hw, n.ahead = 12, prediction.interval = T, level = 0.95)
plot(hw, forecast)
 
#To plot in GGPLOT2:
library(ggplot2)
library(reshape)
HWplot<-function(ts_object,  n.ahead=4,  CI=.95,  error.ribbon='green', line.size=1){
hw_object<-HoltWinters(ts_object)
forecast<-predict(hw_object,  n.ahead=n.ahead,  prediction.interval=T,  level=CI)
for_values<-data.frame(time=round(time(forecast),  3),  value_forecast=as.data.frame(forecast)$fit,  dev=as.data.frame(forecast)$upr-as.data.frame(forecast)$fit)
fitted_values<-data.frame(time=round(time(hw_object$fitted),  3),  value_fitted=as.data.frame(hw_object$fitted)$xhat)
actual_values<-data.frame(time=round(time(hw_object$x),  3),  Actual=c(hw_object$x))
graphset<-merge(actual_values,  fitted_values,  by='time',  all=TRUE)
graphset<-merge(graphset,  for_values,  all=TRUE,  by='time')
graphset[is.na(graphset$dev),  ]$dev<-0
graphset$Fitted<-c(rep(NA,  NROW(graphset)-(NROW(for_values) + NROW(fitted_values))),  fitted_values$value_fitted,  for_values$value_forecast)
graphset.melt<-melt(graphset[, c('time', 'Actual', 'Fitted')], id='time')
p<-ggplot(graphset.melt,  aes(x=time,  y=value)) + geom_ribbon(data=graphset, aes(x=time, y=Fitted, ymin=Fitted-dev,  ymax=Fitted + dev),  alpha=.2,  fill=error.ribbon) + geom_line(aes(colour=variable), size=line.size) + geom_vline(x=max(actual_values$time),  lty=2) + xlab('Time') + ylab('Value') + theme(legend.position='bottom') + scale_colour_hue('')
return(p)
}
 
#To plot:
HWplot(demand, n.ahead = 12)
 
#To edit plot:
graph <- HWplot(demand, n.ahead = 12, error.ribbon = "red")
graph <- graph + scale_x_continuous(breaks = seq(2000, 2012))
plot(graph)
